- separate handling of messages from component itself; allow multiple handling methods;
  use naming convention (bad) or decorators (good) to mark what message(s) are handled

- allow component to run it's own code in thread; requires a call to some "pump" method
  to keep the message handling flowing; alternative is to require setting up a timer to
  inject messages for the component at regular intervals; still, if component wants to
  block in a read() that won't work; see multiprocessing

- multiprocessing.Queue exposes fileno() and can be used with select(); components that
  want to block in a read() (or whatever) could add that fileno() and handle messages
  that way; framework doesn't share data directly between components anyway, so we don't
  need threading, just concurrency

- modifying a running system's component structure could be more carefully constrained;
  should it? hot plugging into a bus would open up some nice features after all; this
  also seems easier with multiprocessing since no direct object references exist

- once you move beyond very simple things, some kind of naming service may be useful,
  especially for the distributed (multiprocessing) version; also since busses can be
  nested, a nested naming scheme seems appropriate; let's use path names? pretend you
  are component "A" hooked into some bus; for you, "/" is the bus you are on; for all
  components on this bus, "/" is the same bus; some other component would use "/A" to
  refer to "A"; of course that would never happen *except* if we want to determine if
  a certain component sits on the bus with us; there may be another bus "B" of course,
  and you refer to it as "/B"; from your point of view a component "C" on bus "B" is
  "/B/C" and so on; what if yous bus is hooked into some other bus? for components on
  that bus you are not "A" and not "/A" but "/yourbusname/A" and so on; bad idea to
  think of "A" as a specific component though, it's more of a "type" since multitple
  components of that type maybe be around (beyond your control really)

- for the distributed approach, using pickles is a somewhat dubious proposition; after
  all, there's really no good reason to think every component is best written in Python;
  also, the bus really doesn't need to do much analysis of the message except to see
  if it's of interest to anybody; some language-agnostic message format may be better;
  or make the message format pluggable, now there's a thought; JSON actually looks ok
  and there's JSON-RPC which we could leverage
